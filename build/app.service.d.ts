export declare class AppService {
    private appId;
    private apiUrl;
    private token;
    private deviceId;
    private version;
    constructor(appId: string, parameters: {
        apiUrl: string;
        deviceId: string;
        version: string;
    });
    setJwtToken(token: string): void;
    getJwtToken(): string;
    createUserWithDeviceId(): Promise<any>;
    getMediaServer(meetingUserId: string): Promise<any>;
    isApproved(meetingUserId: string): Promise<any>;
    getMeetings(): Promise<any>;
    joinMeetingById(meetingId: number): Promise<any>;
    login(userKey: string, password: string, deviceId: string): Promise<any>;
    checkSafeDeviceCode(code: string, deviceId: string): Promise<any>;
    googleLogin(googleToken: string, deviceId: string): Promise<any>;
    isTokenValid(): Promise<any>;
    signup(data: any): Promise<any>;
    signupConfirm(data: any): Promise<any>;
    forgotPassword(data: any): Promise<any>;
    controlForgotPasswordCode(data: any): Promise<any>;
    changePassword(data: any): Promise<any>;
    createPublicUser(Token?: string): Promise<any>;
    createMeeting(): Promise<any>;
    createSchedule(data: any): Promise<any>;
    updateSchedule(data: any): Promise<any>;
    getSchedules(data: any): Promise<any>;
    getSchedule(id: string): Promise<any>;
    addFile(fileName: string, meetingId: string, fileBase64: string): Promise<any>;
    getFile(file: string): Promise<any>;
    addLogs(logs: any[]): Promise<any>;
    addLog(status: string, category: string, message: string, meetingId: string, username: string, hasCam: boolean, hasMic: boolean, isCamActive: boolean, isMicActive: boolean): Promise<any>;
    getCountries(): Promise<any>;
    getProfile(): Promise<any>;
    updateProfile(data: any): Promise<any>;
    updateMeeting(data: any): Promise<any>;
    invite(data: any): Promise<any>;
    isMeetingValid(meetingId: string, password: string): Promise<any>;
    joinMeeting(meetingId: string, password: string, meetingFullName: string): Promise<any>;
    controlInviteCode(code: string): Promise<any>;
    sendEmailVerification(): Promise<any>;
    getTimezones(): Promise<any>;
    isMeetingOwner(meetingUserId: string): Promise<any>;
    getMediaServerById(meetingUserId: string, mediaServerId: number): Promise<any>;
    connectMeeting(data: any): Promise<any>;
    updateMeetingUser(data: any): Promise<any>;
    getMeetingUserList(data: any): Promise<any>;
    getLiveMeetingInfo(data: any): Promise<any>;
    getMyMeetingUser(data: any): Promise<any>;
    getLiveUpdateMeetingFeatures(meetingUserId: string, data: any): Promise<any>;
    makeHost(data: any): Promise<any>;
    reactions(data: any): Promise<any>;
    raiseYourHand(data: any): Promise<any>;
    raiseYourHandDown(data: any): Promise<any>;
    muteMeetingUser(data: any): Promise<any>;
    approveUser(data: any): Promise<any>;
    liveClose(data: any): Promise<any>;
    liveMeetingCloseAll(data: any): Promise<any>;
    removeUser(data: any): Promise<any>;
    sendChatMessage(data: any): Promise<any>;
    getApprovedUserList(data: any): Promise<any>;
    getChatMessages(data: any): Promise<any>;
    getOldChatMessages(data: any): Promise<any>;
    iAmHere(_meetingUserId: string): Promise<any>;
    getMeetingEvents(_meetingUserId: string): Promise<any>;
}
